name: release

on:
  push:
    tags:
      - v*

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.cargo_ver.outputs.version }}
      upload: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4

      - name: Get Date
        id: get_date
        run: |
          date +'%Y.%m.%d'
          echo date=$(date +'%Y.%m.%d') >>$GITHUB_OUTPUT

      - name: Get the version in cargo
        id: cargo_ver
        run: |
          VERSION=$(grep '^version' Cargo.toml | cut -d '"' -f 2)
          echo ${VERSION}
          echo version=${VERSION} >>$GITHUB_OUTPUT
          echo v=v${VERSION} >>$GITHUB_OUTPUT
          test ${GITHUB_REF/refs\/tags\//} = v${VERSION}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.cargo_ver.outputs.v }}
          release_name: Release ${{ steps.cargo_ver.outputs.v }} (${{ steps.get_date.outputs.date }})
          body: Automated release
          draft: false
          prerelease: false

  build-and-upload:
    needs: release
    strategy:
      matrix:
        arch: [amd64, arm64, armhf]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Build deb
        run: make TARGET=${{ matrix.arch }} deb
      - name: Get Path of Artifact
        id: getpath
        run: |
          ASSET_PATH=$(ls target/*/debian/sectora_${{ needs.release.outputs.version }}_${{ matrix.arch }}.deb | head -n 1)
          echo "asset_path=$ASSET_PATH" >> $GITHUB_OUTPUT
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload }}
          asset_path: ${{ steps.getpath.outputs.asset_path }}
          asset_name: sectora_${{ needs.release.outputs.version }}_${{ matrix.arch }}.deb
          asset_content_type: application/vnd.debian.binary-package
